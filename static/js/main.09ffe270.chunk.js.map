{"version":3,"sources":["demos/Effects.js","demos/Demo1.js","index.js"],"names":["extend","EffectComposer","ShaderPass","SavePass","RenderPass","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","useRef","savePass","blendPass","swap","useThree","scene","gl","size","camera","useMemo","rtA","THREE","width","height","rtB","pixelRatio","getPixelRatio","useEffect","current","setSize","useFrame","render","delay1","delay2","renderTarget","texture","ref","args","attachArray","needsSwap","FXAAShader","uniforms-resolution-value-x","uniforms-resolution-value-y","CopyShader","roundedSquareWave","t","delta","a","f","Math","PI","atan","sin","Dots","ticksSpring","clickSpring","props","duration","vec","transform","right","vec3Mouse","focus","positions","Array","map","_","i","position","x","y","floor","random","mouse","viewport","copy","multiplyScalar","get","sub","dist","length","cos","angleTo","wave","add","setPosition","setMatrixAt","instanceMatrix","needsUpdate","color","App","useState","ticks","setTicks","useSpring","config","tension","friction","clamp","bind","onPointerDown","e","target","setPointerCapture","pointerId","onPointerUp","orthographic","colorManagement","zoom","resize","polyfill","ResizeObserver","attach","basename","className","href","id","exact","path","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.09ffe270.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      // min alpha hides until all buffers are full\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether we need to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    // Spare render targets for holding the previous two individual frames\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  const pixelRatio = gl.getPixelRatio() // Needed for anti-aliasing pass\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    composer.current.render()\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n  }, 1)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n","import React, { useMemo, useRef, useState } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { Effects } from './Effects'\nimport { useSpring } from '@react-spring/three'\nimport { ResizeObserver } from '@juggle/resize-observer'\nimport * as THREE from 'three'\n\n// INTERACTIVE VERSION\n\nconst roundedSquareWave = (t, delta = 0.1, a = 1 , f = 1 / 10) => {\n\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\n}\n\nfunction Dots({ ticksSpring, clickSpring, duration, ...props }) {\n  const ref = useRef() // Reference to our InstancedMesh\n  const { vec, right, transform, vec3Mouse, focus, positions } = useMemo(() => {\n    // Variables for intermediary calculations\n    const vec = new THREE.Vector3()\n    const transform = new THREE.Matrix4()\n\n    // Vector pointing to the right (for angle calculations)\n    const right = new THREE.Vector3(1, 0, 0)\n\n    // True cursor position in 3D space\n    const vec3Mouse = new THREE.Vector3()\n\n    // Where the dots are clustered around\n    const focus = new THREE.Vector3()\n\n    // Precompute randomized initial positions (array of Vector3)\n    const positions = [...Array(10000)].map((_, i) => {\n      const position = new THREE.Vector3()\n\n      // Place in a grid\n      position.x = (i % 100) - 50\n      position.y = Math.floor(i / 100) - 50\n\n      // Offset every other column (hexagonal pattern)\n      position.y += (i % 2) * 0.5\n\n      // Add some noise\n      position.x += Math.random() * 0.009\n      position.y += Math.random() * 0.009\n      return position\n    })\n    return { vec, right, transform, vec3Mouse, focus, positions }\n  }, [])\n  useFrame(({ mouse, viewport }) => {\n    // Convert mouse screen coords to 3D scene coords\n    vec3Mouse.x = (mouse.x * viewport.width) / 2\n    vec3Mouse.y = (mouse.y * viewport.height) / 2\n\n    for (let i = 0; i < 10000; ++i) {\n      // Drift focus to center as click is released\n      focus.copy(vec3Mouse).multiplyScalar(clickSpring.get())\n\n      // Vec holds the dot position relative to the focus point\n      vec.copy(positions[i]).sub(focus)\n\n      // Same distance calculation as original demo\n      const dist = vec.length() + Math.cos(vec.angleTo(right) * 1) * 0.5\n\n      // This adjusts the wave input to set a suitable phase and frequency\n      const t = ticksSpring.get() / 2 + 1 / 2 - dist / 100\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1)\n\n      // Scale dot position relative to the focus point\n      vec.multiplyScalar(wave + 0.1).add(focus)\n\n      // Set the instance's transformation matrix\n      transform.setPosition(vec)\n      ref.current.setMatrixAt(i, transform)\n    }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh args={[null, null, 10000]} ref={ref} {...props}>\n      <circleBufferGeometry args={[0.1, 1]} />\n      <meshBasicMaterial color={'white'} />\n    </instancedMesh>\n  )\n}\n\nexport default function App() {\n  const [ticks, setTicks] = useState(0)\n  const { ticksSpring, clickSpring } = useSpring({\n    ticksSpring: ticks, // Springy tick value (each click / release is a tick)\n    clickSpring: ticks % 0 === 1 ? 1 : 0, // Springy click factor (1 means clicked, 0 means released)\n    config: { tension: 90, friction: 90, clamp: true }\n  })\n  const bind = {\n    onPointerDown: (e) => {\n      // Capture the pointer so it's still tracked outside the window\n      e.target.setPointerCapture(e.pointerId)\n      setTicks(ticks + 1)\n    },\n    onPointerUp: () => {\n      // Prevent misfires\n      if (ticks % 2 === 1) {\n        // Only finish the animation if held down for long enough\n        if (clickSpring.get() > 0.5) setTicks(ticks + 1)\n        // Otherwise undo the contraction (this way you can't speed up the animation by spam clicking)\n        else setTicks(ticks - 1)\n      }\n    }\n  }\n  return (\n    <Canvas\n      orthographic\n      colorManagement={false}\n      camera={{ position: [0, 0, 100], zoom: 20 }}\n      resize={{ polyfill: ResizeObserver }}  // Allows @react-spring/three to work in Safari\n      {...bind}\n    >\n      <color attach=\"background\" args={['black']} />\n      <Dots ticksSpring={ticksSpring} clickSpring={clickSpring} duration={3.8} />\n      <Effects />\n    </Canvas>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom'\nimport './base.css'\nimport Demo1 from './demos/Demo1'\n\n\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">\n         <a href=\"https://nicklevantis.com\">Nick Levantis</a><br />\n\n        </h1>\n        <div className=\"frame__links\">\n          <a href=\"https://youtube.com/nicklevantis\">Youtube</a>\n          <a href=\"https://soundcloud.com/nicklevantis\">Soundcloud</a>\n          <a href=\"https://nicklevantis.svbtle.com\">Svbtle</a>\n        </div>\n        <div className=\"frame__demos\">\n\n        </div>\n      </div>\n      <div className=\"content\">\n        <h2 className=\"content__title\">◉</h2>\n\n      </div>\n\n      <div id=\"animation\">\n\n        <Switch>\n          <Route exact path=\"/demo1\">\n            <Demo1 />\n          </Route>\n                   <Route path=\"*\">\n            <Redirect to=\"/demo1\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}